pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: python:3.9-slim
    command: ['cat']
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  - name: docker
    image: docker:20.10.7
    command: ['cat']
    tty: true
    securityContext:
      privileged: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: workspace-volume
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }

    environment {
        APP_NAME = "flask-app"
        RELEASE = "1.0.0"
        DOCKER_USER = "ksi05298"
        DOCKER_PASS = credentials('pjt-dockerhubtoken') // Jenkins Credentials에 저장된 Docker Hub 자격증명 ID
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage("Checkout from SCM") {
            steps {
                container('python') {
                    script {
                        sh 'pwd'
                        sh 'ls -al'
                        sh 'ls -al test-python'
                        git branch: 'pjt', credentialsId: 'pjt-githubtoken', url: 'https://github.com/ciscocloud03-team5/code-integration'
                        sh 'ls -al'
                        sh 'ls -al test-python'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                container('python') {
                    script {
                        dir('/home/jenkins/agent/workspace/test-python/test-python') {
                            sh 'pwd'
                            sh 'ls -al'
                            sh '''
                            python -m venv venv
                            . venv/bin/activate
                            pip install -r requirements.txt
                            pytest
                            '''
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        dir('/home/jenkins/agent/workspace/test-python/test-python') {
                            sh 'docker build --no-cache -t ${IMAGE_NAME}:${IMAGE_TAG} .'
                            sh 'echo $DOCKER_PASS | docker login -u ${DOCKER_USER} --password-stdin'
                            sh 'docker push ${IMAGE_NAME}:${IMAGE_TAG}'
                            sh 'docker push ${IMAGE_NAME}:latest'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
