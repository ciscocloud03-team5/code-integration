pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            defaultContainer 'jnlp'
            yaml """
                apiVersion: v1
                kind: Pod
                spec:
                  serviceAccountName: jenkins-admin
                  containers:
                  - name: python
                    image: python:3.9-slim
                    command:
                    - sleep
                    args:
                    - 99d
                    tty: true
                    volumeMounts:
                    - name: workspace-volume
                      mountPath: /home/jenkins/agent
                  - name: docker
                    image: docker
                    command:
                    - sleep
                    args:
                    - 99d
                    tty: true
                    volumeMounts:
                    - name: workspace-volume
                      mountPath: /home/jenkins/agent
                    - name: docker-socket
                      mountPath: /var/run
                  - name: docker-daemon
                    image: docker:dind
                    securityContext:
                      privileged: true
                    volumeMounts:
                    - name: docker-socket
                      mountPath: /var/run
                  volumes:
                  - name: workspace-volume
                    emptyDir: {}
                  - name: docker-socket
                    emptyDir: {}
            """
        }
    }

    environment {
        APP_NAME = "flask-app"
        RELEASE = "1.0.0"
        DOCKER_USER = "ksi05298"
        DOCKERHUB_CREDENTIALS = credentials('pjt-dockerhubtoken')
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage("Checkout from SCM") {
            steps {
                container('python') {
                    script {
                        sh 'pwd'
                        sh 'ls -al'
                        sh 'ls -al test-python'
                        git credentialsId: 'pjt-githubtoken',
                          url: 'https://github.com/ciscocloud03-team5/code-integration',
                          branch: 'pjt'
                        sh 'ls -al'
                        sh 'ls -al test-python'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                container('python') {
                    script {
                        dir('/home/jenkins/agent/workspace/test-python/test-python') {
                            sh 'pwd'
                            sh 'ls -al'
                            sh '''
                            python -m venv venv
                            . venv/bin/activate
                            pip install -r requirements.txt
                            pytest
                            '''
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        dir('/home/jenkins/agent/workspace/test-python/test-python') {
                            sh 'docker build --no-cache -t ${IMAGE_NAME}:${IMAGE_TAG} .'
                            sh 'docker build --no-cache -t ${IMAGE_NAME}:latest .'
                            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                            sh 'docker push ${IMAGE_NAME}:${IMAGE_TAG}'
                            sh 'docker push ${IMAGE_NAME}:latest'
                        }
                    }
                }
            }
        }
    }
}
