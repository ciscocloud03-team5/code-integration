pipeline {
    agent {
        kubernetes {
            cloud 'team5-eks'
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: python
                image: python:3.9-slim
                tty: true
              - name: docker
                image: docker:19.03.12
                tty: true
            """
        }
    }

    environment {
        APP_NAME = "flask-prometheus-app"
        RELEASE = "1.0.0"
        DOCKER_USER = "ksi05298"
        DOCKER_PASS = credentials('pjt-dockerhubtoken') // Jenkins Credentials에 저장된 Docker Hub 자격증명 ID
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout from SCM & Run Tests') {
            steps {
                container('python') {
                    script {
                        git branch: 'pjt', credentialsId: 'pjt-githubtoken', url: 'https://github.com/ciscocloud03-team5/code-integration'
                    }
                    script {
                        sh '''
                        echo "Run Tests"
                        ls -al
                        python -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt
                        pytest
                        '''
                    }
                }
            }
        }

        stage('Checkout from SCM & Build and Push Docker Image') {
            steps {
                container('docker') {
                    script {
                            git branch: 'pjt', credentialsId: 'pjt-githubtoken', url: 'https://github.com/ciscocloud03-team5/code-integration'
                    }
                    script {
                        dockerImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                        docker.withRegistry('', DOCKER_PASS) {
                            dockerImage.push("${IMAGE_TAG}")
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }
    }
}
